{
  "openapi": "3.0.3",
  "info": {
    "title": "My Unsplash Challenge - Image Uploader",
    "description": "This is an API based on the OpenAPI 3.0 specification.\nIn this version of the application, was added only the image upload feature to Cloudinary, with the respective images saved in the Mongodb Atlas database.\n\nOn future versions of this application, there will have the details about how use the user routes and authentication.\n\n  Challenge Links:\n- [Image Uploader - Challenge 1](https://devchallenges.io/challenges/O2iGT9yBd6xZBrOcVirx)\n- [Authentication APP - Challenge 2](https://devchallenges.io/challenges/N1fvBjQfhlkctmwj1tnw)\n- [My Unsplash - Challenge 3](https://devchallenges.io/challenges/rYyhwJAxMfES5jNQ9YsP)\n\nSome other useful links:\n- [The GitHub repository of the project](https://github.com/klev-sm/unsplash-api)\n- [The Cloudinary Documentation](https://cloudinary.com/documentation)\n- [The MongoDB Documentation](https://www.mongodb.com/docs/)",
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.1"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://unsplash-yi42.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "images",
      "description": "Every route to CRUD images"
    },
    {
      "name": "user",
      "description": "Every route to CRUD users"
    }
  ],
  "paths": {
    "/images": {
      "post": {
        "summary": "Create a new image",
        "tags": [
          "images"
        ],
        "description": "Save and upload a new image to database.",
        "requestBody": {
          "description": "Image to save on database",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  },
                  "subtitle": {
                    "type": "string",
                    "description": "The subtitle is required but you can pass it with empty value."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Success on uploading image to Cloudinary and saving it to database"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "63c93d3374cc28be0abf44e1"
                        },
                        "imageLink": {
                          "type": "string",
                          "example": "https://res.cloudinary.com/dpuvdfcf9/image/upload/v1674132785/images/eqdw6qiupjoou2mm3m0j.png"
                        },
                        "subtitle": {
                          "type": "string",
                          "example": "Logo Flamengo"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error trying to save image to Cloudinary"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Invalid image format"
          }
        }
      },
      "get": {
        "summary": "Get all uploaded images from database.",
        "tags": [
          "images"
        ],
        "description": "Get all saved images from database.",
        "responses": {
          "200": {
            "description": "Images successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "Success on returning images from database."
                    },
                    "response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "The id generated by Mongo database",
                            "example": "63bd9028a17a124633267eaf"
                          },
                          "link": {
                            "type": "string",
                            "description": "The link of the saved image",
                            "example": "https://res.cloudinary.com/dpuvdfcf9/image/upload/v1673367591/pu5mlbvhtienaasep4hx.jpg"
                          },
                          "publicID": {
                            "type": "string",
                            "description": "The id generated by Cloudinary Service",
                            "example": "pu5mlbvhtienaasep4hx"
                          },
                          "__v": {
                            "type": "number",
                            "description": "Mongodb version of database"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Images not found"
          }
        }
      },
      "patch": {
        "summary": "Edit a saved image",
        "tags": [
          "images"
        ],
        "description": "If it was passed, the subtitle is changed on database, but the image link in the database remains the same, changing only the image uploaded to Cloudinary.",
        "requestBody": {
          "description": "You need to provide the mongo's database (_id) in order to the route find the image that you want to edit. You can edit image or subtitle or both, the only thing that changes it is if you pass or not the value of a propertie.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image that will serve to update"
                  },
                  "id": {
                    "type": "string",
                    "description": "It is the identifier of the image only in the database"
                  },
                  "subtitle": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success on updating image on Cloudinary",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "Success when updating image in the service."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to upload image"
          }
        }
      }
    },
    "/images/{id}": {
      "delete": {
        "summary": "Delete a saved image",
        "tags": [
          "images"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the saved image in database to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully deleted"
          },
          "400": {
            "description": "Can't delete image from services."
          },
          "404": {
            "description": "Image not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "summary": "Create a new user",
        "tags": [
          "user"
        ],
        "description": "Only username, password and email are required. The other fields will only be setted when editing user through PUT route. Every user that you creates have an default profile picture that is an image already saved on Cloudinary service, you can change the default picture after on PUT route. This route will also return an authentication token, that you have to store on client cookies using httpOnly",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "description": "You need to pass an email that does not exists on database."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password will be hashed on back-end. You can update it from PUT route, but you will never get."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User successfully saved."
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "63c93d3374cc28be0abf44e1"
                        },
                        "username": {
                          "type": "string",
                          "example": "Kleverton"
                        },
                        "email": {
                          "type": "string",
                          "example": "kleverton@gmail.com"
                        },
                        "profilePicture": {
                          "type": "string",
                          "example": "https://res.cloudinary.com/dpuvdfcf9/image/upload/v1674144178/userPictures/0596bdb89b60fe771acd2f5972a9d3e3_isnvff.jpg"
                        },
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2M2NmMjhmZTZhNTIzZDJhNWE4NWQ1ZTIiLCJlbWFpbCI6ImtsZXZlcnRvbkBnbWFpbC5jb20iLCJ1c2VybmFtZSI6IktsZXZlcnRvbiIsImlhdCI6MTY3NDU3OTAyMCwiZXhwIjoxNjc0NzUxODIwfQ.FwfcRSuMCBwmvQTOJgn0EVgnlgJAf1g7AUdVytFfgiM"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Default Error, will be throwned when an email that you want to save already exists, if was an error trying to hash the password or save the user to the database.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email already exists"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all saved users.",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Images successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "Users sucessfully returned."
                    },
                    "response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_": {
                            "type": "string",
                            "description": "The id generated by Mongo database",
                            "example": "63cf28fe6a523d2a5a85d5e2"
                          },
                          "username": {
                            "type": "string",
                            "description": "The name of the passed user.",
                            "example": "Kleverton"
                          },
                          "email": {
                            "type": "string",
                            "example": "kleverton@gmail.com"
                          },
                          "profilePicture": {
                            "type": "number",
                            "example": "https://res.cloudinary.com/dpuvdfcf9/image/upload/v1674144178/userPictures/0596bdb89b60fe771acd2f5972a9d3e3_isnvff.jpg"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unknown Error."
          },
          "404": {
            "description": "Users not found"
          }
        }
      },
      "put": {
        "summary": "Edit an existent user.",
        "tags": [
          "user"
        ],
        "description": "You can update almost all fields from an user, except the id. You also can edit as many as field you want every requisition.",
        "requestBody": {
          "required": true,
          "description": "You need to provide the mongo's database (id) in order to the route find the user that you want to edit. You only can edit one user at a time. Every field is optional, except id.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "profilePicture": {
                    "type": "string",
                    "format": "binary"
                  },
                  "username": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "description": "You need to pass an email that does not exists on database."
                  },
                  "bio": {
                    "type": "string",
                    "description": "Doesn't have character limit, sou you must do that on before upload if you want"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Doesn't have validation on backend, so you must provide the validation and certify that the type is a string before change the field."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password will be encrypted on server."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User sucessfully updated."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Default Error, will be throwned when an email that you want to edit already exists, if it was not possible to find the given ID from requisition and if was not possible to update image by uploading to database.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email already exists"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}": {
      "delete": {
        "summary": "Delete a saved user",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the saved user in database to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Sucessfully Deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User sucessfully updated."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "It was not possible to delete user."
          },
          "404": {
            "description": "Not possible to find given id"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "summary": "Route to login an user",
        "tags": [
          "user"
        ],
        "description": "Route to authenticate an user, you need to provide a valid and unused e-mail and a password. This route will also return an authentication token, that you have to store on client cookies using httpOnly",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "You need to pass an email that does not exists on database."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password will be hashed on back-end."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sucessfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "userID": {
                          "type": "string",
                          "example": "63cf28fe6a523d2a5a85d5e2"
                        },
                        "email": {
                          "type": "string",
                          "example": "kleverton@gmail.com"
                        }
                      }
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2M2NmMjhmZTZhNTIzZDJhNWE4NWQ1ZTIiLCJlbWFpbCI6ImtsZXZlcnRvbkBnbWFpbC5jb20iLCJ1c2VybmFtZSI6IktsZXZlcnRvbiIsImlhdCI6MTY3NDU3OTAyMCwiZXhwIjoxNjc0NzUxODIwfQ.FwfcRSuMCBwmvQTOJgn0EVgnlgJAf1g7AUdVytFfgiM"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Default error message"
          },
          "404": {
            "description": "Some fields not found it."
          }
        }
      }
    }
  }
}